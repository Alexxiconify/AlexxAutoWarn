# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    tags: # Trigger the release job when a tag starting with 'v' is pushed (e.g., v1.0.0, v1.0.0-alpha)
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    # Upload the built JAR as an artifact so the 'release' job can access it
    # Updated to actions/upload-artifact@v4
    - name: Upload plugin JAR
      uses: actions/upload-artifact@v4 # Changed to v4
      with:
        name: AlexxAutoWarn-plugin-jar # A unique name for this artifact
        path: target/*.jar # This assumes your plugin JAR is in the target/ directory and ends with .jar
        # v4 does not require 'if-no-files-found' by default, it just creates an empty artifact

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  release:
    needs: build # This job depends on the 'build' job completing successfully
    # Only run this job if the event was a 'push' and the ref is a tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission to create a release and upload assets

    steps:
    # Download the plugin JAR from the 'build' job
    # Updated to actions/download-artifact@v4
    - name: Download plugin JAR
      uses: actions/download-artifact@v4 # Changed to v4
      with:
        name: AlexxAutoWarn-plugin-jar # Must match the name used in the 'upload-artifact' step
        path: ./downloaded-artifacts # Download to a specific directory

    - name: Get plugin version and JAR filename
      id: get_info
      run: |
        # Find the JAR file in the downloaded artifacts directory
        JAR_FILE=$(find ./downloaded-artifacts -name "AlexxAutoWarn-*.jar" | head -n 1)
        if [ -z "$JAR_FILE" ]; then
          echo "Error: JAR file not found in downloaded artifacts!"
          exit 1
        fi
        
        # Extract the version from the JAR filename (e.g., AlexxAutoWarn-1.0.0-shaded.jar -> 1.0.0-shaded)
        # This regex captures everything between "AlexxAutoWarn-" and ".jar"
        VERSION=$(basename "$JAR_FILE" | sed -E 's/AlexxAutoWarn-(.*)\.jar/\1/')
        
        echo "Detected JAR file: $JAR_FILE"
        echo "Detected version: $VERSION"
        
        # Set outputs for subsequent steps
        echo "plugin_version=$VERSION" >> $GITHUB_OUTPUT
        echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "jar_name=AlexxAutoWarn-${VERSION}.jar" >> $GITHUB_OUTPUT # Standardized asset name

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub Actions
      with:
        tag_name: ${{ github.ref }} # Use the pushed tag (e.g., v1.0.0) as the release tag
        release_name: Release ${{ github.ref }} # Name of the release (e.g., Release v1.0.0)
        body: |
          # Release Notes for ${{ github.ref }}

          This release includes the latest build of the AlexxAutoWarn plugin.

          **Download:**
          - `${{ steps.get_info.outputs.jar_name }}`

          ---
          *Auto-generated by GitHub Actions. Please edit this release description with more detailed notes.*
        draft: false # Set to true to create a draft release (you can publish it later)
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }} # Automatically set prerelease based on tag name

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.get_info.outputs.jar_path }} # Path to the JAR in the runner's workspace
        asset_name: ${{ steps.get_info.outputs.jar_name }} # Name of the asset in the release (e.g., AlexxAutoWarn-1.0.0.jar)
        asset_content_type: application/java-archive # MIME type for JAR files
